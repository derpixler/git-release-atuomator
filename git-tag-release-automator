#!/bin/bash

################################################################################
# Script Name: git-tag-release-automator.sh
# Author: RenÃ© Reimann (info@rene-reimann.de)
# Version: v1.2.0
#
# Description:
# Automated script for Git release tagging and creation of release branches for
# major and minor versions. Fetches latest Git tag and prompts user to update
# major, minor, or patch version. Creates new Git tag and release branch, e.g.
# "release/v1.1.0", and pushes it to the remote repository if no release branch
# is available.
#
################################################################################

##
# This function creates a new Git tag with the specified name and pushes it to
# the remote repository. The name of the tag must be passed as the first argument
# to the function. The function uses the 'git tag' and 'git push' commands to
# create and push the tag, respectively. After the tag has been created and pushed
# successfully, a success message is displayed to the console.
#
# @param string $tag_name The name of the tag to create and push
# @return void
##
function create_and_push_git_tag()
{
    new_tag=$1
    git pull --quiet > /dev/null 2>&1
    git tag $new_tag > /dev/null 2>&1
    git push origin $new_tag  > /dev/null 2>&1
    echo "Git tag $new_tag created and pushed successfully."
}

##
# This function creates a new Git release branch with the specified
# name or switches to an existing one, if it already exists. The name
# of the release branch is prefixed with "release/" and must be passed
# as the first argument to the function. If the release branch already
# exists, the function switches to it using the switch_branch() function.
#
# @param string $release_version The version number of the release branch to create or switch to
# @return void
##
function create_release_branch()
{
  local release_branch_name="release/$1"
  local current_branch=$2

  if ! [ -z "$(release_branch_exists "$release_branch_name")" ]; then
    switch_branch $release_branch
  else
    echo "No \"$release_branch_name\" found, create one? (y/n)"
    read -n 1 -r -p "Your choice: " choice
    printf "\n\n"

    case $choice in
        y)
            # Create a new release branch
            if git rev-parse --verify main >/dev/null 2>&1; then
              origin_branch="main"
            elif git rev-parse --verify master >/dev/null 2>&1; then
              origin_branch="master"
            fi

            switch_branch $origin_branch
            git pull > /dev/null 2>&1
            git checkout -b $release_branch_name $origin_branch > /dev/null 2>&1
            git push -u origin $release_branch_name > /dev/null 2>&1
            printf "%s\n%s\n" "Release branch \"$release_branch_name\" created." "Now you can merge into \"$release_branch_name\" and create tags."

            switch_branch $current_branch
            exit 1
            ;;
        n)
          echo "ok."
          exit 1
          ;;
        *)
          echo "Invalid input."
          exit 1
          ;;
    esac
  fi
}

function release_branch_exists() {
    local branch_name="release/$1"
    git ls-remote --exit-code --heads origin "$branch_name" >/dev/null 2>&1
}

##
# Switches the current Git branch to the specified branch
#
# If no branch is specified, the default value of 'main' is used.
# If the specified branch does not exist, an attempt is made to
# use the 'main' or 'master' branch, if available. If neither of
# these branches exist.
#
# @param string $branch The name of the branch to switch to (optional)
# @return void
##
function switch_branch()
{
  local branch=${1:-main}
  if [ "$branch" == "main" ]; then
    if git rev-parse --verify main >/dev/null 2>&1; then
      branch="main"
    elif git rev-parse --verify master >/dev/null 2>&1; then
      branch="master"
    fi
  else
    branch=$(echo $branch | sed 's/^origin\///')
  fi

  git checkout $branch > /dev/null 2>&1
  #echo "Switched branch to: $(git rev-parse --abbrev-ref HEAD)"
}

##
 # This function initializes the release tagging process.
 #
 # It first asks the user if the new tag should start with "v" or not, and then creates
 # and pushes the new Git tag with the specified version number. If there are no existing
 # tags in the repository, the function prompts the user to choose whether or not to
 # create a tag starting with "v". If the user chooses to create a tag starting with "v",
 # the function creates and pushes the new tag with the version number "v1.0.0". If the user
 # chooses not to create a tag starting with "v", the function creates and pushes the new
 # tag with the version number "1.0.0". If the user enters invalid input, the function
 # terminates with an error message.
 #
 # @return void
##
function init_release_tagging()
{
  # Ask the user if the new tag should start with "v" or not
  echo "There are no existing tags. Do you want to create a tag starting with 'v'? (y/n)"
  read -n 1 -r -p "Your choice: " choice
  echo

  case $choice in
      y|n)
          # Create and push the new git tag without "v"
          new_tag=$(if [[ "$choice" == "y" ]]; then echo "v"; fi)1.0.0
              create_release_branch $new_tag
              create_and_push_git_tag $new_tag
          ;;
      *)
          echo "Invalid input."
          exit 1
          ;;
  esac
}

if ! [ -d ".git" ]; then
  echo "This directory does not contain a Git repository."
  exit 1
fi

current_branch=$(git branch --show-current)
latest_remote_tag=$(git ls-remote --tags origin | awk '{print $2}' | grep -v '{}' | awk -F"/" '{print $3}' | grep -v '@' | sort -V | tail -1)
tag_latest=$(echo $latest_remote_tag | sed 's/^v//')
tag_prefix=$(echo $latest_remote_tag | grep -E '^v')

if ! [ -n "$tag_latest" ]; then
  init_release_tagging
  exit 1
fi

choice=$1
if [ ! "$choice" ]; then
  # Ask the user which version number (Major, Minor, or Patch) to increase
  printf "\n%s\n\n%s\n" "Latest tag: ${tag_prefix:+v}$tag_latest" "Which part of the version do you want to increase: Major (M), minor (m) or patch (p)?"
  read -n 1 -r -p "Your choice: " choice
  printf "\n\n"
fi

case $choice in
    M)
       new_tag_number=$(echo $tag_latest | awk -F. '{ printf("%d.%d.%d", $1 + 1, 0, 0) }')
       ;;
    m)
       new_tag_number=$(echo $tag_latest | awk -F. '{ printf("%d.%d.0", $1, $2 + 1) }')
       ;;
    p)
       new_tag_number=$(echo $tag_latest | awk -F. '{ printf("%d.%d.%d", $1, $2, $3 + 1) }')
       ;;
    *)
       echo "Invalid input."
       exit 1
       ;;
esac

new_tag="${tag_prefix:+v}$new_tag_number"
case $choice in
    M|m)
        if release_branch_exists "$new_tag"; then
            create_and_push_git_tag $new_tag
        else
            create_release_branch $new_tag $current_branch
        fi

        switch_branch $current_branch
        ;;
    p)
       current_release_branch=$(echo $new_tag | sed 's/.$/0/')
       if release_branch_exists "$new_tag"; then
          echo "Create tag $new_tag at the current release branch \"release/$current_release_branch\""
          create_and_push_git_tag $new_tag
       else
           create_release_branch $current_release_branch
       fi

       switch_branch $current_branch
       ;;
    *)
       echo "Invalid input."
       exit 1
       ;;
esac
